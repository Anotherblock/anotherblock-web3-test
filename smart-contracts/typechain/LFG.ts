/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface LFGInterface extends utils.Interface {
  functions: {
    "gm()": FunctionFragment;
    "gmCount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "gm" | "gm()" | "gmCount" | "gmCount()"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "gm", values?: undefined): string;
  encodeFunctionData(functionFragment: "gm()", values?: undefined): string;
  encodeFunctionData(functionFragment: "gmCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "gmCount()", values?: undefined): string;

  decodeFunctionResult(functionFragment: "gm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gm()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gmCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gmCount()", data: BytesLike): Result;

  events: {
    "Wagmi(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Wagmi"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Wagmi(address,uint256)"): EventFragment;
}

export interface WagmiEventObject {
  sender: string;
  count: BigNumber;
}
export type WagmiEvent = TypedEvent<[string, BigNumber], WagmiEventObject>;

export type WagmiEventFilter = TypedEventFilter<WagmiEvent>;

export interface LFG extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LFGInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gm(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "gm()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gmCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "gmCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  gm(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "gm()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gmCount(overrides?: CallOverrides): Promise<BigNumber>;

  "gmCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    gm(overrides?: CallOverrides): Promise<void>;

    "gm()"(overrides?: CallOverrides): Promise<void>;

    gmCount(overrides?: CallOverrides): Promise<BigNumber>;

    "gmCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Wagmi(address,uint256)"(sender?: null, count?: null): WagmiEventFilter;
    Wagmi(sender?: null, count?: null): WagmiEventFilter;
  };

  estimateGas: {
    gm(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "gm()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gmCount(overrides?: CallOverrides): Promise<BigNumber>;

    "gmCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    gm(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "gm()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gmCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gmCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
